// <auto-generated />

using System;

using Microsoft.EntityFrameworkCore.Migrations;

using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Esentis.Horudom.Persistence.Migrations
{
	public partial class initialmigration : Migration
	{
		protected override void Up(MigrationBuilder migrationBuilder)
		{
			migrationBuilder.CreateTable(
				name: "Actors",
				columns: table => new
				{
					Id = table.Column<int>(nullable: false)
						.Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
					FirstName = table.Column<string>(nullable: false),
					LastName = table.Column<string>(nullable: false),
					BirthDate = table.Column<DateTime>(nullable: false),
					Bio = table.Column<string>(nullable: false)
				},
				constraints: table =>
				{
					table.PrimaryKey("PK_Actors", x => x.Id);
				});

			migrationBuilder.CreateTable(
				name: "Directors",
				columns: table => new
				{
					Id = table.Column<int>(nullable: false)
						.Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
					FirstName = table.Column<string>(nullable: false),
					LastName = table.Column<string>(nullable: false),
					BirthDate = table.Column<string>(nullable: false),
					Bio = table.Column<string>(nullable: false)
				},
				constraints: table =>
				{
					table.PrimaryKey("PK_Directors", x => x.Id);
				});

			migrationBuilder.CreateTable(
				name: "Genres",
				columns: table => new
				{
					Id = table.Column<int>(nullable: false)
						.Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
					Name = table.Column<string>(nullable: false)
				},
				constraints: table =>
				{
					table.PrimaryKey("PK_Genres", x => x.Id);
				});

			migrationBuilder.CreateTable(
				name: "Movies",
				columns: table => new
				{
					Id = table.Column<long>(nullable: false)
						.Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
					Title = table.Column<string>(nullable: false),
					Duration = table.Column<int>(nullable: false),
					Plot = table.Column<string>(nullable: false),
					ReleaseDate = table.Column<DateTime>(nullable: false),
					CountryOrigin = table.Column<string>(nullable: false)
				},
				constraints: table =>
				{
					table.PrimaryKey("PK_Movies", x => x.Id);
				});

			migrationBuilder.CreateTable(
				name: "Posters",
				columns: table => new
				{
					Id = table.Column<int>(nullable: false)
						.Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
					Url = table.Column<string>(nullable: false)
				},
				constraints: table =>
				{
					table.PrimaryKey("PK_Posters", x => x.Id);
				});

			migrationBuilder.CreateTable(
				name: "Screenshots",
				columns: table => new
				{
					Id = table.Column<int>(nullable: false)
						.Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
					Url = table.Column<string>(nullable: false)
				},
				constraints: table =>
				{
					table.PrimaryKey("PK_Screenshots", x => x.Id);
				});

			migrationBuilder.CreateTable(
				name: "Writers",
				columns: table => new
				{
					Id = table.Column<int>(nullable: false)
						.Annotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn),
					FirstName = table.Column<string>(nullable: false),
					LastName = table.Column<string>(nullable: false),
					BirthDate = table.Column<string>(nullable: false),
					Bio = table.Column<string>(nullable: false)
				},
				constraints: table =>
				{
					table.PrimaryKey("PK_Writers", x => x.Id);
				});

			migrationBuilder.CreateTable(
				name: "MovieActors",
				columns: table => new
				{
					MovieId = table.Column<long>(nullable: false),
					ActorId = table.Column<int>(nullable: false)
				},
				constraints: table =>
				{
					table.PrimaryKey("PK_MovieActors", x => new { x.MovieId, x.ActorId });
					table.ForeignKey(
						name: "FK_MovieActors_Actors_ActorId",
						column: x => x.ActorId,
						principalTable: "Actors",
						principalColumn: "Id",
						onDelete: ReferentialAction.Restrict);
					table.ForeignKey(
						name: "FK_MovieActors_Movies_MovieId",
						column: x => x.MovieId,
						principalTable: "Movies",
						principalColumn: "Id",
						onDelete: ReferentialAction.Restrict);
				});

			migrationBuilder.CreateTable(
				name: "MovieDirectors",
				columns: table => new
				{
					MovieId = table.Column<long>(nullable: false),
					DirectorId = table.Column<int>(nullable: false)
				},
				constraints: table =>
				{
					table.PrimaryKey("PK_MovieDirectors", x => new { x.MovieId, x.DirectorId });
					table.ForeignKey(
						name: "FK_MovieDirectors_Directors_DirectorId",
						column: x => x.DirectorId,
						principalTable: "Directors",
						principalColumn: "Id",
						onDelete: ReferentialAction.Restrict);
					table.ForeignKey(
						name: "FK_MovieDirectors_Movies_MovieId",
						column: x => x.MovieId,
						principalTable: "Movies",
						principalColumn: "Id",
						onDelete: ReferentialAction.Restrict);
				});

			migrationBuilder.CreateTable(
				name: "MovieGenres",
				columns: table => new
				{
					MovieId = table.Column<long>(nullable: false),
					GenreId = table.Column<int>(nullable: false)
				},
				constraints: table =>
				{
					table.PrimaryKey("PK_MovieGenres", x => new { x.MovieId, x.GenreId });
					table.ForeignKey(
						name: "FK_MovieGenres_Genres_GenreId",
						column: x => x.GenreId,
						principalTable: "Genres",
						principalColumn: "Id",
						onDelete: ReferentialAction.Restrict);
					table.ForeignKey(
						name: "FK_MovieGenres_Movies_MovieId",
						column: x => x.MovieId,
						principalTable: "Movies",
						principalColumn: "Id",
						onDelete: ReferentialAction.Restrict);
				});

			migrationBuilder.CreateTable(
				name: "MoviePosters",
				columns: table => new
				{
					MovieId = table.Column<long>(nullable: false),
					PosterId = table.Column<int>(nullable: false)
				},
				constraints: table =>
				{
					table.PrimaryKey("PK_MoviePosters", x => new { x.MovieId, x.PosterId });
					table.ForeignKey(
						name: "FK_MoviePosters_Movies_MovieId",
						column: x => x.MovieId,
						principalTable: "Movies",
						principalColumn: "Id",
						onDelete: ReferentialAction.Restrict);
					table.ForeignKey(
						name: "FK_MoviePosters_Posters_PosterId",
						column: x => x.PosterId,
						principalTable: "Posters",
						principalColumn: "Id",
						onDelete: ReferentialAction.Restrict);
				});

			migrationBuilder.CreateTable(
				name: "MovieScreenshots",
				columns: table => new
				{
					MovieId = table.Column<long>(nullable: false),
					ScreenshotId = table.Column<int>(nullable: false)
				},
				constraints: table =>
				{
					table.PrimaryKey("PK_MovieScreenshots", x => new { x.MovieId, x.ScreenshotId });
					table.ForeignKey(
						name: "FK_MovieScreenshots_Movies_MovieId",
						column: x => x.MovieId,
						principalTable: "Movies",
						principalColumn: "Id",
						onDelete: ReferentialAction.Restrict);
					table.ForeignKey(
						name: "FK_MovieScreenshots_Screenshots_ScreenshotId",
						column: x => x.ScreenshotId,
						principalTable: "Screenshots",
						principalColumn: "Id",
						onDelete: ReferentialAction.Restrict);
				});

			migrationBuilder.CreateTable(
				name: "MovieWriters",
				columns: table => new
				{
					MovieId = table.Column<long>(nullable: false),
					WriterId = table.Column<int>(nullable: false)
				},
				constraints: table =>
				{
					table.PrimaryKey("PK_MovieWriters", x => new { x.MovieId, x.WriterId });
					table.ForeignKey(
						name: "FK_MovieWriters_Movies_MovieId",
						column: x => x.MovieId,
						principalTable: "Movies",
						principalColumn: "Id",
						onDelete: ReferentialAction.Restrict);
					table.ForeignKey(
						name: "FK_MovieWriters_Writers_WriterId",
						column: x => x.WriterId,
						principalTable: "Writers",
						principalColumn: "Id",
						onDelete: ReferentialAction.Restrict);
				});

			migrationBuilder.CreateIndex(
				name: "IX_MovieActors_ActorId",
				table: "MovieActors",
				column: "ActorId");

			migrationBuilder.CreateIndex(
				name: "IX_MovieDirectors_DirectorId",
				table: "MovieDirectors",
				column: "DirectorId");

			migrationBuilder.CreateIndex(
				name: "IX_MovieGenres_GenreId",
				table: "MovieGenres",
				column: "GenreId");

			migrationBuilder.CreateIndex(
				name: "IX_MoviePosters_PosterId",
				table: "MoviePosters",
				column: "PosterId");

			migrationBuilder.CreateIndex(
				name: "IX_MovieScreenshots_ScreenshotId",
				table: "MovieScreenshots",
				column: "ScreenshotId");

			migrationBuilder.CreateIndex(
				name: "IX_MovieWriters_WriterId",
				table: "MovieWriters",
				column: "WriterId");
		}

		protected override void Down(MigrationBuilder migrationBuilder)
		{
			migrationBuilder.DropTable(
				name: "MovieActors");

			migrationBuilder.DropTable(
				name: "MovieDirectors");

			migrationBuilder.DropTable(
				name: "MovieGenres");

			migrationBuilder.DropTable(
				name: "MoviePosters");

			migrationBuilder.DropTable(
				name: "MovieScreenshots");

			migrationBuilder.DropTable(
				name: "MovieWriters");

			migrationBuilder.DropTable(
				name: "Actors");

			migrationBuilder.DropTable(
				name: "Directors");

			migrationBuilder.DropTable(
				name: "Genres");

			migrationBuilder.DropTable(
				name: "Posters");

			migrationBuilder.DropTable(
				name: "Screenshots");

			migrationBuilder.DropTable(
				name: "Movies");

			migrationBuilder.DropTable(
				name: "Writers");
		}
	}
}
